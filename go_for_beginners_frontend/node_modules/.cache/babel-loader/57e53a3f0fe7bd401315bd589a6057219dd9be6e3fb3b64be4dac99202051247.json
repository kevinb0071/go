{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kevin\\\\go_for_beginners_frontend\\\\src\\\\PaymentForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { PaymentElement, LinkAuthenticationElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport Loader from \"./Loader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PaymentForm() {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [email, setEmail] = useState(\"\");\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n    const clientSecret = new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");\n    if (!clientSecret) {\n      return;\n    }\n    stripe.retrievePaymentIntent(clientSecret).then(({\n      paymentIntent\n    }) => {\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          break;\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js hasn't yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n    setIsLoading(true);\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000/success\"\n      }\n    });\n\n    // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n    setIsLoading(false);\n  };\n  const paymentElementOptions = {\n    layout: \"tabs\"\n  };\n  const handleSetEmail = e => {\n    setEmail(e.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(LinkAuthenticationElement, {\n      id: \"link-authentication-element\",\n      onChange: e => handleSetEmail(e)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PaymentElement, {\n      id: \"payment-element\",\n      options: paymentElementOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isLoading || !stripe || !elements,\n      id: \"submit\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"button-text\",\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner\",\n          id: \"spinner\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 24\n        }, this) : \"Pay now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"payment-message\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n}\n_s(PaymentForm, \"LhWChBKfkari0zZNBtJ4IuzMdKY=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = PaymentForm;\nconst Payment = () => {\n  return false ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 18\n  }, this) : /*#__PURE__*/_jsxDEV(PaymentForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 31\n  }, this);\n};\n_c2 = Payment;\nexport default Payment;\nvar _c, _c2;\n$RefreshReg$(_c, \"PaymentForm\");\n$RefreshReg$(_c2, \"Payment\");","map":{"version":3,"names":["React","useEffect","useState","PaymentElement","LinkAuthenticationElement","useStripe","useElements","Loader","jsxDEV","_jsxDEV","PaymentForm","_s","stripe","elements","email","setEmail","message","setMessage","isLoading","setIsLoading","clientSecret","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","paymentIntent","status","handleSubmit","e","preventDefault","error","confirmPayment","confirmParams","return_url","type","paymentElementOptions","layout","handleSetEmail","value","id","onSubmit","children","onChange","fileName","_jsxFileName","lineNumber","columnNumber","options","disabled","className","_c","Payment","_c2","$RefreshReg$"],"sources":["C:/Users/kevin/go_for_beginners_frontend/src/PaymentForm.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  PaymentElement,\r\n  LinkAuthenticationElement,\r\n  useStripe,\r\n  useElements,\r\n} from \"@stripe/react-stripe-js\";\r\nimport Loader from \"./Loader\";\r\n\r\nfunction PaymentForm() {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [message, setMessage] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!stripe) {\r\n      return;\r\n    }\r\n\r\n    const clientSecret = new URLSearchParams(window.location.search).get(\r\n      \"payment_intent_client_secret\"\r\n    );\r\n\r\n    if (!clientSecret) {\r\n      return;\r\n    }\r\n\r\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\r\n      switch (paymentIntent.status) {\r\n        case \"succeeded\":\r\n          setMessage(\"Payment succeeded!\");\r\n          break;\r\n        case \"processing\":\r\n          setMessage(\"Your payment is processing.\");\r\n          break;\r\n        case \"requires_payment_method\":\r\n          setMessage(\"Your payment was not successful, please try again.\");\r\n          break;\r\n        default:\r\n          setMessage(\"Something went wrong.\");\r\n          break;\r\n      }\r\n    });\r\n  }, [stripe]);\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js hasn't yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n\r\n    const { error } = await stripe.confirmPayment({\r\n      elements,\r\n      confirmParams: {\r\n        // Make sure to change this to your payment completion page\r\n        return_url: \"http://localhost:3000/success\",\r\n      },\r\n    });\r\n\r\n    // This point will only be reached if there is an immediate error when\r\n    // confirming the payment. Otherwise, your customer will be redirected to\r\n    // your `return_url`. For some payment methods like iDEAL, your customer will\r\n    // be redirected to an intermediate site first to authorize the payment, then\r\n    // redirected to the `return_url`.\r\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\r\n      setMessage(error.message);\r\n    } else {\r\n      setMessage(\"An unexpected error occurred.\");\r\n    }\r\n\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const paymentElementOptions = {\r\n    layout: \"tabs\",\r\n  };\r\n\r\n  const handleSetEmail = (e) => {\r\n    setEmail(e.value);\r\n  };\r\n\r\n  return (\r\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\r\n      <LinkAuthenticationElement\r\n        id=\"link-authentication-element\"\r\n        onChange={(e) => handleSetEmail(e)}\r\n      />\r\n      <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\r\n      <button disabled={isLoading || !stripe || !elements} id=\"submit\">\r\n        <span id=\"button-text\">\r\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\r\n        </span>\r\n      </button>\r\n      {/* Show any error or success messages */}\r\n      {message && <div id=\"payment-message\">{message}</div>}\r\n    </form>\r\n  );\r\n}\r\n\r\nconst Payment = () => {\r\n  return false ? <Loader /> : <PaymentForm />;\r\n};\r\n\r\nexport default Payment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}